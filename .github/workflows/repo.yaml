name: Arch AUR Repository Build

on:
  #workflow_dispatch:
  schedule:
    # 每年5月/10月编译
    - cron: '0 0 15 5,11 *'
  push:
  # tags: []

jobs:
  build-arm:
    runs-on: ubuntu-latest
    name: Build on ${{ matrix.arch }}

    #env:
    #  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

    strategy:
      matrix:
        include:
          - arch: aarch64

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set variables
        id: set-vars
        run: |
          echo "::set-output name=date::$(date +'%Y-%m-%d %H:%M')"
          echo "::set-output name=repo-id::$(echo ${{ github.repository }} | sed 's/\//-/g')"

      # - name: Store private key
      #   id: gpg
      #   run: |
      #     echo "$GPG_PRIVATE_KEY" > ${{ runner.temp }}/gpg.key

      - name: Prepare repo
        id: prepare
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.arch }}
          distro: archarm_latest
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          dockerRunArgs: |
            --volume "${{ runner.temp }}:/workspace"
          env: |
            PKGEXT: .pkg.tar.zst
            REPO_IDENTIFIER: ${{ steps.set-vars.outputs.repo-id }}
          shell: /bin/sh
          run: |
            echo "::set-output name=arch::$(uname -m)"

            pacman-key --init
            pacman-key --populate archlinuxarm
            pacman -Syyu --noconfirm
            pacman -S --noconfirm base-devel git sudo
            echo 'auruser ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/auruser
            useradd -m auruser

            # 安装aurutil
            cd /tmp
            curl --output aurutils.tar.gz https://aur.archlinux.org/cgit/aur.git/snapshot/aurutils.tar.gz
            tar xf aurutils.tar.gz
            chmod -R 777 /tmp/aurutils
            cd aurutils
            sudo -u auruser makepkg --syncdeps --noconfirm
            ls -l
            pacman -U --noconfirm /tmp/aurutils/aurutils-*.pkg.*

            cp -v /tmp/aurutils/aurutils-*.pkg.* /workspace
            repo-add /workspace/${REPO_IDENTIFIER}.db.tar.gz /workspace/aurutils-*.pkg.*
            chmod -R 777 /workspace
            ls -l /workspace

            # 配置本地仓库
            echo "[${REPO_IDENTIFIER}]" >> /etc/pacman.conf
            echo "SigLevel = Optional TrustAll" >> /etc/pacman.conf
            echo "Server = file:///workspace " >> /etc/pacman.conf
            pacman -Sy --noconfirm

            # 拉取需要构建的自定义Arch软件包
            ls -l ${GITHUB_WORKSPACE}
            cp ${GITHUB_WORKSPACE}/fetch-pkgs.sh /workspace/fetch-pkgs.sh
            mkdir -p /workspace/pkgs
            sudo -u auruser sh fetch-pkgs.sh

            # 构建自定义软件包
            cd /workspace/pkgs
            for pkgdir in *; do
              echo $pkgdir
              # if [ -d "$pkgdir" ]; then
              #     sudo -u auruser aur sync --sign -A --noconfirm --noview --database ${REPO_IDENTIFIER} --root /workspace ${pkg} || echo "!!! Package ${pkg} failed"
              # fi
            done
            chmod -R 777 /workspace

      - name: Remove symbolic links
        run: |
          cd ${GITHUB_WORKSPACE}
          ls -al
          rm -v ${{ steps.set-vars.outputs.repo-id }}.db ${{ steps.set-vars.outputs.repo-id }}.files
          cp -v ${{ steps.set-vars.outputs.repo-id }}.db.tar.gz ${{ steps.set-vars.outputs.repo-id }}.db
          cp -v ${{ steps.set-vars.outputs.repo-id }}.files.tar.gz ${{ steps.set-vars.outputs.repo-id }}.files
          rm -fv build-log.txt *.sh
          ls -al

      - name: Remove release
        uses: cb80/delrel@latest
        with:
          tag: ${{ steps.prepare.outputs.arch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.prepare.outputs.arch }}
          name: Arch Linux ARM AUR and Custom Build ${{ github.run_number }} from ${{ steps.set-vars.outputs.date }} for ${{ steps.prepare.outputs.arch }}
          body: |
            Instructions for adding this repo...
          artifacts: ${{ runner.temp }}/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
